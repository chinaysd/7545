C51 COMPILER V9.59.0.0   SIMULATE_UART                                                     03/30/2019 14:27:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SIMULATE_UART
OBJECT MODULE PLACED IN .\Objects\simulate_uart.obj
COMPILER INVOKED BY: E:\MDK\C51\BIN\C51.EXE ..\bsp\simulate_uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\bsp;..\lib;..\user
                    -) DEBUG OBJECTEXTEND PRINT(.\Listings\simulate_uart.lst) TABS(7) OBJECT(.\Objects\simulate_uart.obj)

line level    source

   1          #include "simulate_uart.h"
   2          #include <string.h>
   3          #include "timeout.h"
   4          
   5          enum{
   6                 UART_START = 0,
   7                 UART_DATA,
   8                 UART_STOP
   9          };
  10          
  11          static XDATA unsigned char rx_rev_byte_cnt[S_MAX_UART_NUM];
  12          static XDATA unsigned char rx_sta[S_MAX_UART_NUM];
  13          static XDATA unsigned char rx_data[S_MAX_UART_NUM][S_MAX_REV_DATA];   
  14          static XDATA unsigned char rx_start_cnt[S_MAX_UART_NUM];
  15          static XDATA unsigned char rx_bit_cnt[S_MAX_UART_NUM];
  16          static XDATA unsigned char rx_byte_cnt[S_MAX_UART_NUM];
  17          static volatile unsigned char rx_user_data[S_MAX_UART_NUM];
  18          static XDATA TIMEOUT_PARA rx_timeout[S_MAX_UART_NUM];
  19          static XDATA unsigned char rx_offline_flag[S_MAX_UART_NUM];
  20          
  21          static unsigned char read_rx_pin(unsigned char pin)
  22          {
  23   1             if(pin == 0){
  24   2                    return READ_RX1_PIN;
  25   2             }else if(pin == 1){
  26   2                    return READ_RX2_PIN;
  27   2             }else{
  28   2                    return 0;
  29   2             }
  30   1      }
  31          
  32          void simulate_uart_init(void)
  33          {
  34   1             int i;
  35   1             CLR_REG_CON(4,4);
  36   1             CLR_REG_CON(1,2);
  37   1             for(i = 0; i < S_MAX_UART_NUM;i ++){
  38   2                    rx_rev_byte_cnt[i] = 0;
  39   2                    rx_sta[i] = UART_START;
  40   2                    rx_data[i][0] = rx_data[i][1] = rx_data[i][2] = 0;
  41   2                    rx_start_cnt[i] = 0;
  42   2                    rx_bit_cnt[i] = 0;
  43   2                    rx_byte_cnt[i] = 0;
  44   2                    rx_offline_flag[i] = 0;
  45   2                    TimeOut_Record(&rx_timeout[i], S_UART_TIMEOUT);
  46   2             }      
  47   1      }
  48          
  49          void simulate_uart_rx_handle(void)
  50          {
  51   1             int i;
  52   1             for(i = 0; i < S_MAX_UART_NUM;i ++){
  53   2                    switch(rx_sta[i]){
  54   3                           case UART_START:{
C51 COMPILER V9.59.0.0   SIMULATE_UART                                                     03/30/2019 14:27:41 PAGE 2   

  55   4                                  if(!read_rx_pin(i)){
  56   5                                         if(rx_start_cnt[i] ++ >= S_START_DET_CNT){
  57   6                                                rx_sta[i] = UART_DATA;
  58   6                                                rx_start_cnt[i] = 0;
  59   6                                                if(rx_rev_byte_cnt[i] == 0){
  60   7                                                       rx_data[i][0] = rx_data[i][1] = rx_data[i][2] = 0;
  61   7                                                }
  62   6                                         }
  63   5                                  }else{
  64   5                                         rx_start_cnt[i] = 0;
  65   5                                  }
  66   4                                  rx_byte_cnt[i]  = 0;
  67   4                                  break;
  68   4                           }
  69   3      
  70   3                           case UART_DATA:{
  71   4                                  if(rx_byte_cnt[i] ++ >= S_DATA_DET_CNT){
  72   5                                         rx_byte_cnt[i] = 0;
  73   5                                         rx_bit_cnt[i] ++;
  74   5                                         if(read_rx_pin(i)){
  75   6                                                rx_data[i][rx_rev_byte_cnt[i]] |= 1<<(rx_bit_cnt[i] -1);
  76   6                                         }
  77   5                                  
  78   5                                         if(rx_bit_cnt[i] >= S_DATA_BIT_CNT){
  79   6                                                rx_byte_cnt[i] = 0;                              
  80   6                                                rx_rev_byte_cnt[i] ++;
  81   6      
  82   6                                                if(rx_data[i][0] != S_UART_START){
  83   7                                                       rx_rev_byte_cnt[i] = 0;
  84   7                                                }
  85   6                                                rx_sta[i] = UART_STOP;
  86   6                                                rx_bit_cnt[i] = 0;
  87   6                                                
  88   6                                                if(rx_rev_byte_cnt[i] >= S_MAX_REV_DATA){
  89   7                                                       unsigned char crc =0;
  90   7                                                       rx_rev_byte_cnt[i]  = 0;                                
  91   7                                                       crc = rx_data[i][0] + rx_data[i][1] ;            
  92   7                                                       if(crc == rx_data[i][2]){
  93   8                                                              rx_user_data[i] = rx_data[i][1];
  94   8                                                              rx_offline_flag[i] = False;
  95   8                                                              TimeOut_Record(&rx_timeout[i], S_UART_TIMEOUT);
  96   8                                                              if(i == 0){
  97   9                                                                     //P22 =!P22;                                                   
  98   9                                                              }else if(i == 1){
  99   9                                                                     //P20 = !P20;
 100   9                                                              }
 101   8                                                       }
 102   7                                                }                                  
 103   6                                         }
 104   5                                  }
 105   4                                  break;
 106   4                           }
 107   3      
 108   3                           case UART_STOP:{
 109   4                                  rx_sta[i] = UART_START;
 110   4                                  rx_start_cnt[i] = 0;
 111   4                                  break;
 112   4                           }
 113   3                           default:
 114   3                                  break;
 115   3                    }
 116   2             }
C51 COMPILER V9.59.0.0   SIMULATE_UART                                                     03/30/2019 14:27:41 PAGE 3   

 117   1      }
 118          
 119          unsigned char simulate_get_userdata(unsigned char rx_port)
 120          {
 121   1             if(TimeOutDet_Check(&rx_timeout[rx_port])){
 122   2                    return NO_KEY;
 123   2             }
 124   1             return rx_user_data[rx_port];
 125   1      }
 126          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    995    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
